{"version":3,"sources":["components/Extra/navbar.jsx","components/Graphing/point_graph.jsx","components/Graphing/polar_curves.jsx","components/App/App.jsx","index.js"],"names":["React","Component","convert_coordinates","x","y","r","Math","sqrt","round","Number","EPSILON","theta","atan2","PI","PointGraph","props","state","x_value","y_value","polar_coordinate","handleChange","bind","handleSubmit","event","target","name","value","this","setState","input_coordinate","console","log","preventDefault","className","onSubmit","type","onChange","PolarCurves","src","height","alt","style","scope","aria-current","href","id","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","App","ReactDOM","render","document","querySelector"],"mappings":"2LAEqBA,IAAMC,U,aCA3B,SAASC,EAAoBC,EAAGC,GAC9B,IAAIC,EAAIC,KAAKC,KAAKJ,EAAEA,EAAIC,EAAEA,GAC1BC,EAAIC,KAAKE,MAA6B,KAAtBH,EAAII,OAAOC,UAAoB,IAC/C,IAAIC,EAAQL,KAAKM,MAAMR,EAAED,GAAKG,KAAKO,GAInC,OAHc,IAAVF,IACFA,GAAgB,MAEX,CAACN,IAAGM,S,IAwFEG,E,kDApFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,QAAS,GACTC,iBAAkB,UAGpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,gDAYnB,SAAaE,GACX,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MACrBC,KAAKC,SAAL,eAAgBH,EAAOC,M,0BAGzB,SAAaH,GACX,IAEIM,EAAmB,IAFT3B,EAAoByB,KAAKX,MAAMC,QAAQU,KAAKX,MAAME,SAASb,EAElC,KADrBH,EAAoByB,KAAKX,MAAMC,QAAQU,KAAKX,MAAME,SAASP,MACjB,IAC5DgB,KAAKC,SAAS,CAACT,iBAAkBU,IAEjCC,QAAQC,IAAIF,GACZN,EAAMS,mB,oBAGR,WACE,OACE,yBAAKC,UAAU,aAEb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,8CACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eAAf,gDAGA,wBAAIA,UAAU,+BACZ,wBAAIA,UAAU,mBAAd,oBACA,wBAAIA,UAAU,mBAAd,oBACA,wBAAIA,UAAU,mBAAd,sBACA,wBAAIA,UAAU,mBAAd,IAAiC,kCAAjC,OAAiD,kCAAjD,OAAiE,qCAGrE,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eAAf,mBACiB,KADjB,gBAGE,wBAAIA,UAAU,+BACZ,wBAAIA,UAAU,mBAAd,UAAwC,KAAxC,KAAgD/B,EAAoB,EAAE,GAAGG,EAAzE,KAA8EH,EAAoB,EAAE,GAAGS,MAAvG,KACA,wBAAIsB,UAAU,mBAAd,UAAwC,KAAxC,KAAgD/B,EAAoB,EAAE,GAAGG,EAAzE,KAA8EH,EAAoB,EAAE,GAAGS,MAAvG,KACA,wBAAIsB,UAAU,mBAAd,UAAwC,KAAxC,KAAgD/B,EAAoB,EAAE,GAAGG,EAAzE,KAA8EH,EAAoB,EAAE,GAAGS,MAAvG,KACA,wBAAIsB,UAAU,mBAAd,UAAwC,KAAxC,KAAgD/B,EAAoB,EAAE,GAAGG,EAAzE,KAA8EH,EAAoB,EAAE,GAAGS,MAAvG,SAMV,6BA7BF,iFAgCE,6BACA,0BAAMuB,SAAUP,KAAKL,cACnB,mCACG,2BAAOa,KAAK,SAASV,KAAK,UAAUC,MAAOC,KAAKX,MAAMC,QAASmB,SAAUT,KAAKP,eADjF,KAIA,+BACE,2BAAOe,KAAK,SAASV,KAAK,UAAUC,MAAOC,KAAKX,MAAME,QAASkB,SAAUT,KAAKP,eADhF,KAIA,2BAAOe,KAAK,SAAST,MAAM,WAC3B,+BAAK,KAAL,IAAYC,KAAKX,MAAMG,mBAEzB,kC,GA7EiBnB,IAAMC,WCqIhBoC,E,4JA9Ib,WACE,OACE,yBAAKJ,UAAU,aACb,mHACA,kMAKA,yBAAKA,UAAU,sCACb,gCACE,yBAAKK,IAAI,6CAA6CC,OAAO,QAAQC,IAAI,mCACzE,qEAKJ,6BACA,6BAEA,gKAEkC,kCAFlC,OAEkD,kCAFlD,QAKA,mLAKA,oKAIA,yBAAKP,UAAU,gCAAgCQ,MAAO,CAAC,OAAW,UAChE,2BAAOR,UAAU,SACf,+BACE,4BACE,wBAAIS,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,qBAGJ,+BACE,4BACE,iCACA,kCAEF,4BACE,wCACA,oCAEF,4BACE,wCACA,kCAEF,4BACE,wCACA,qCAEF,4BACE,wCACA,mCAEF,4BACE,yCACA,qCAEF,4BACE,yCACA,kCAEF,4BACE,yCACA,oCAEF,4BACE,sCACA,oCAKN,6BACA,gCACE,yBAAKJ,IAAI,yDAAyDC,OAAO,QAAQC,IAAI,mCACrF,0GAOJ,6BAEA,yBAAKP,UAAU,qCAAqCQ,MAAO,CAAC,OAAW,UACtE,gCACG,yBAAKH,IAAI,8CAA8CC,OAAO,QAAQC,IAAI,mCAC1E,6EAGJ,6BACA,6BACA,6BACA,yBAAKP,UAAU,aACb,mHAEA,uBAAGA,UAAU,kBAAkBU,eAAa,OAAOC,KAAK,qCAAxD,4BACA,uBAAGX,UAAU,kBAAkBU,eAAa,OAAOC,KAAK,qCAAxD,8BAEA,yBAAKC,GAAG,aACN,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,cAAcY,GAAG,cAC9B,wBAAIZ,UAAU,QACZ,4BAAQA,UAAU,eAAea,cAAY,WAAWC,cAAY,eAAeC,gBAAc,OAAOC,gBAAc,eAAtH,iDAMJ,yBAAKJ,GAAG,cAAcZ,UAAU,gBAAgBiB,kBAAgB,aAAaC,cAAY,cACvF,yBAAKlB,UAAU,aAAf,2MAEA,6BACA,6BAHA,mFAKA,6BACA,uC,GA/HUjC,IAAMC,WCoDjBmD,E,4JAhDb,WACE,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,aACb,6BACA,kOAEA,wXAIA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gCAAgCQ,MAAO,CAAC,OAAW,UAChE,gCACE,yBAAKR,UAAU,gBAAgBK,IAAI,mDAAmDE,IAAI,mCAC1F,8DAGF,yBAAKP,UAAU,OAEf,gCACE,yBAAKK,IAAI,6DAA6DE,IAAI,6CAC1E,iFAIJ,6BACA,6BACA,6BAEA,yBAAKP,UAAU,cAOf,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAvCMjC,IAAMC,WCExBoD,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.700c0b27.chunk.js","sourcesContent":["import React from 'react';\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <div className=\"container\">\n\n            <a className=\"navbar-brand\" href=\"#\" title=\"Home\" id=\"logo\">Erfan Syed</a>\n\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\"\n            aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n              <div className=\"navbar-nav\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"https://erfansyed.com\">Blog</a>\n              </div>\n            </div>\n\n          </div>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\n\nfunction convert_coordinates(x, y) {\n  let r = Math.sqrt(x*x + y*y);\n  r = Math.round((r + Number.EPSILON) * 10000) / 10000; //rounds to 4 decimals\n  let theta = Math.atan2(y,x) / Math.PI;\n  if (theta !== 0) {\n    theta = theta + \"pi\";\n  }\n  return {r, theta};\n}\n\nclass PointGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x_value: '',\n      y_value: '',\n      polar_coordinate: \"(0, 0)\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({[name]: value});\n  }\n\n  handleSubmit(event) {\n    let input_r = convert_coordinates(this.state.x_value,this.state.y_value).r;\n    let input_theta = convert_coordinates(this.state.x_value,this.state.y_value).theta;\n    let input_coordinate = \"(\" + input_r + \", \" + input_theta + \")\";\n    this.setState({polar_coordinate: input_coordinate});\n\n    console.log(input_coordinate);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <div className=\"container\">\n          <div className=\"card-columns d-flex justify-content-center\">\n            <div className=\"card\">\n              <div className=\"card-header\">\n                Important equations relating x,y to r,&theta;\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">x = r cos &theta;</li>\n                <li className=\"list-group-item\">y = r sin &theta;</li>\n                <li className=\"list-group-item\">tan &theta; = y / x</li>\n                <li className=\"list-group-item\">r<sup>2</sup> = x<sup>2</sup> + y<sup>2</sup></li>\n              </ul>\n            </div>\n            <div className=\"card\">\n              <div className=\"card-header\">\n              Example: (x, y) {'->'} (r, &theta;)\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                  <li className=\"list-group-item\">(1, 0) {'->'} ({convert_coordinates(1,0).r}, {convert_coordinates(1,0).theta})</li>\n                  <li className=\"list-group-item\">(0, 1) {'->'} ({convert_coordinates(0,1).r}, {convert_coordinates(0,1).theta})</li>\n                  <li className=\"list-group-item\">(1, 1) {'->'} ({convert_coordinates(1,1).r}, {convert_coordinates(1,1).theta})</li>\n                  <li className=\"list-group-item\">(0, 0) {'->'} ({convert_coordinates(0,0).r}, {convert_coordinates(0,0).theta})</li>\n                </ul>\n              </div>\n          </div>\n        </div>\n\n        <br/>\n\n        Try inputting a few x and y coordinates and see the corresponding (r, &theta;):\n        <br/>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            (<input type=\"number\" name=\"x_value\" value={this.state.x_value} onChange={this.handleChange} />,\n\n          </label>\n          <label>\n            <input type=\"number\" name=\"y_value\" value={this.state.y_value} onChange={this.handleChange} />)\n\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n          <p> {\"->\"} {this.state.polar_coordinate}</p>\n        </form>\n        <hr></hr>\n      </div>\n\n    );\n  }\n}\n\n\nexport default PointGraph;\n","import React from 'react';\n\nclass PolarCurves extends React.Component {\n  render() {\n    return(\n      <div className=\"container\">\n        <p>The following section will cover how curves are drawn in 2 dimensional polar planes.</p>\n        <p>\n          The graph of a polar equation can be represented by f(&theta;) = r, or by\n          F(r,&theta;) = 0. The following figure demonstrates how circles of various\n          radii look like.\n        </p>\n        <div className=\"d-flex justify-content-center mb-1\">\n          <figure>\n            <img src=\"/images/graph_examples/example_circles.png\" height=\"225px\" alt=\"Cartesian coordinates example.\"></img>\n            <figcaption>Circles of various r values</figcaption>\n          </figure>\n\n        </div>\n\n        <br/>\n        <br/>\n\n        <p>\n          We can see that a circle with radius r can be express simply by r = 1. The equivalent equation in\n          cartesian coordinates would be x<sup>2</sup> + y<sup>2</sup> = 1\n        </p>\n\n        <p>\n          To proceed, some more complex curves can be more easily plotted on a polar plane than cartesian. Let's consider\n          the following curve: r = cos 2&theta;\n        </p>\n\n        <p>\n          We will begin by creating a table of r values based on the angle, &theta;, then we will plot those values on in cartesian coordinates.\n        </p>\n\n        <div className=\"d-flex justify-content-center\" style={{\"height\" : \"450px\"}}>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">&theta;</th>\n                <th scope=\"col\">r = cos 2&theta;</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>0</td>\n                <td>1</td>\n              </tr>\n              <tr>\n                <td>&pi;/6</td>\n                <td>1/2</td>\n              </tr>\n              <tr>\n                <td>&pi;/4</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <td>&pi;/3</td>\n                <td>-1/2</td>\n              </tr>\n              <tr>\n                <td>&pi;/2</td>\n                <td>-1</td>\n              </tr>\n              <tr>\n                <td>2&pi;/3</td>\n                <td>-1/2</td>\n              </tr>\n              <tr>\n                <td>3&pi;/4</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <td>5&pi;/6</td>\n                <td>1/2</td>\n              </tr>\n              <tr>\n                <td>&pi;</td>\n                <td>1</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <br/>\n          <figure>\n            <img src=\"/images/graph_examples/cartesian_plot_of_2costheta.png\" height=\"225px\" alt=\"Cartesian coordinates example.\"></img>\n            <figcaption>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cartesian coordinates of r = cos 2&theta;</figcaption>\n          </figure>\n\n        </div>\n\n\n\n        <br/>\n\n        <div className=\"d-flex justify-content-center mb-3\" style={{\"height\" : \"200px\"}}>\n         <figure>\n            <img src=\"/images/graph_examples/four_leaved_rose.png\" height=\"225px\" alt=\"Cartesian coordinates example.\"></img>\n            <figcaption>Four leaved rose of r = cos 2&theta;</figcaption>\n          </figure>\n        </div>\n        <br/>\n        <br/>\n        <hr/>\n        <div className=\"container\">\n          <p>Below are some useful resources regarding polar coordinates, and graphing utilities.</p>\n\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"https://www.desmos.com/calculator\">Desmos, 2d and 3d Graphs</a>\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"https://www.geogebra.org/graphing\">Geogebra, 2d and 3d Graphs</a>\n\n          <div id=\"accordian\">\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"headingOne\">\n                <h5 className=\"mb-0\">\n                  <button className=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    View Resources used regarding this project.\n                  </button>\n                </h5>\n              </div>\n\n              <div id=\"collapseOne\" className=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n                <div className=\"card-body\">\n                Dawkins, P. (2018, August 27). Section 3-6 : Polar Coordinates. Calculus II - polar coordinates. Retrieved November 10, 2021, from https://tutorial.math.lamar.edu/classes/calcii/polarcoordinates.aspx.\n                <br/>\n                <br/>\n                Stewart, J. (2016). Calculus: Early transcendentals (8th ed.). Cengage Learning.\n                <br/>\n                <br/>\n\n                </div>\n              </div>\n\n            </div>\n          </div>\n\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default PolarCurves;\n","import React from 'react';\nimport NavBar from '../Extra/navbar';\nimport PointGraph from '../Graphing/point_graph';\nimport PolarCurves from '../Graphing/polar_curves';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <br/>\n          <p> Polar Coordinates can be understood from a perspective coming from the more commonly used Cartesian Coordinates. Polar Coordinates\n            can be an easier coordinate system to use under circumstances. </p>\n          <p> Cartesian coordinates contain two perpendicular Axes (x,y) and plot points going in the horizontal and vertical directions cooresponding to the\n            given x and y coordinates. Polar Coordinates can be expressed by an r value to describe the distance from the origin, and a &theta; value to describe\n            the angle the point makes from the positive x-axis.\n          </p>\n          <div className=\"container\">\n            <div className=\"d-flex justify-content-center\" style={{\"height\" : \"250px\"}}>\n              <figure>\n                <img className=\"graph-picture\" src=\"/images/graph_examples/cartesian_coordinates.png\" alt=\"Cartesian coordinates example.\"></img>\n                <figcaption>Cartesian Coordinates</figcaption>\n              </figure>\n\n              <div className=\"vr\"></div>\n\n              <figure>\n                <img src=\"/images/graph_examples/cartesian_and_polar_coordinates.png\" alt=\"Cartesian and polar coordinates example.\"></img>\n                <figcaption>&nbsp;&nbsp;Cartesian and Polar Coordinates</figcaption>\n              </figure>\n\n            </div>\n            <br/>\n            <br/>\n            <hr/>\n\n            <div className=\"container\">\n\n\n\n\n            </div>\n\n            <PointGraph/>\n            <PolarCurves/>\n\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App/App.jsx\";\n\n\n\n\nReactDOM.render(\n\n  <App />,\n  document.querySelector('#root')\n);\n\n\n"],"sourceRoot":""}